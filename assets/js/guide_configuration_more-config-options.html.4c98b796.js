"use strict";(self.webpackChunkvp=self.webpackChunkvp||[]).push([[69009],{89203:(n,e,a)=>{a.r(e),a.d(e,{comp:()=>o,data:()=>p});var s=a(6199);const t={},o=(0,a(21065).A)(t,[["render",function(n,e){const a=(0,s.g2)("RouteLink");return(0,s.uX)(),(0,s.CE)("div",null,[e[3]||(e[3]=(0,s.Fv)('<h1 id="more-configuration-options" tabindex="-1"><a class="header-anchor" href="#more-configuration-options"><span>More configuration options</span></a></h1><h2 id="network-map" tabindex="-1"><a class="header-anchor" href="#network-map"><span>Network map</span></a></h2><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token comment"># Optional: networkmap options</span></span>\n<span class="line"><span class="token key atrule">map_options</span><span class="token punctuation">:</span></span>\n<span class="line">    <span class="token key atrule">graphviz</span><span class="token punctuation">:</span></span>\n<span class="line">        <span class="token comment"># Optional: Colors to be used in the graphviz network map (default: shown below)</span></span>\n<span class="line">        <span class="token key atrule">colors</span><span class="token punctuation">:</span></span>\n<span class="line">            <span class="token key atrule">fill</span><span class="token punctuation">:</span></span>\n<span class="line">                <span class="token key atrule">enddevice</span><span class="token punctuation">:</span> <span class="token string">&#39;#fff8ce&#39;</span></span>\n<span class="line">                <span class="token key atrule">coordinator</span><span class="token punctuation">:</span> <span class="token string">&#39;#e04e5d&#39;</span></span>\n<span class="line">                <span class="token key atrule">router</span><span class="token punctuation">:</span> <span class="token string">&#39;#4ea3e0&#39;</span></span>\n<span class="line">            <span class="token key atrule">font</span><span class="token punctuation">:</span></span>\n<span class="line">                <span class="token key atrule">coordinator</span><span class="token punctuation">:</span> <span class="token string">&#39;#ffffff&#39;</span></span>\n<span class="line">                <span class="token key atrule">router</span><span class="token punctuation">:</span> <span class="token string">&#39;#ffffff&#39;</span></span>\n<span class="line">                <span class="token key atrule">enddevice</span><span class="token punctuation">:</span> <span class="token string">&#39;#000000&#39;</span></span>\n<span class="line">            <span class="token key atrule">line</span><span class="token punctuation">:</span></span>\n<span class="line">                <span class="token key atrule">active</span><span class="token punctuation">:</span> <span class="token string">&#39;#009900&#39;</span></span>\n<span class="line">                <span class="token key atrule">inactive</span><span class="token punctuation">:</span> <span class="token string">&#39;#994444&#39;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div><h2 id="external-converters" tabindex="-1"><a class="header-anchor" href="#external-converters"><span>External converters</span></a></h2><p>You can define external converters to e.g. add support for a DiY device. The extension can be a file with <code>.js</code> extension in the <code>data/external_converters/</code> directory or a NPM package. Ensure that default export from your external converter exports an array or device object (refer to the definition in the <code>devices</code> folder of zigbee-herdsman-converters). Some examples can be found <a href="https://github.com/Koenkk/zigbee2mqtt.io/tree/master/docs/externalConvertersExample" target="_blank" rel="noopener noreferrer">here</a>.</p><p>Note that external converters take precedence of standard converters</p>',6)),(0,s.Lk)("p",null,[e[1]||(e[1]=(0,s.eW)("See also ")),(0,s.bF)(a,{to:"/advanced/support-new-devices/01_support_new_devices.html"},{default:(0,s.k6)((()=>e[0]||(e[0]=[(0,s.eW)("How to support new devices")]))),_:1,__:[0]}),e[2]||(e[2]=(0,s.eW)("."))])])}]]),p=JSON.parse('{"path":"/guide/configuration/more-config-options.html","title":"More configuration options","lang":"en-US","frontmatter":{"pageClass":"content-page","sidebarDepth":1},"git":{"updatedTime":1748691861000,"contributors":[{"name":"dependabot[bot]","username":"dependabot[bot]","email":"49699333+dependabot[bot]@users.noreply.github.com","commits":2,"url":"https://github.com/dependabot[bot]"}],"changelog":[{"hash":"21c59b7739ae1dd78e261c5726442ee3d5365023","time":1748691861000,"email":"49699333+dependabot[bot]@users.noreply.github.com","author":"dependabot[bot]","message":"fix(ignore): bump the all group with 2 updates (#3836)","coAuthors":[{"name":"dependabot[bot]","email":"49699333+dependabot[bot]@users.noreply.github.com"}]}]},"filePathRelative":"guide/configuration/more-config-options.md"}')}}]);